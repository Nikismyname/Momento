@model VideoCreateWithSettings
@{
    ViewData["Title"] = "CreateEdit";
}

@await Html.PartialAsync("_VideoAndTopControll")

@*<form method="post">
    <div asp-validation-summary="All"></div>*@

@if (Model.Mode == "create")
{
    <div class="form-group row">
        <label for="txtUrl" class="col-sm-2 col-form-label text-right">Url</label>
        <div class="col-sm-6">
            <input class="form-control-black" asp-for="ContentCreate.Url" type="text" id="txtUrl" />
        </div>
        <div class="col-sm-2">
            <button class="btn btn-secondary" type="button" id="btnPlay">Play</button>
        </div>
    </div>
}
@*TODO: id="txtUrl" twice might cause problems*@
<input asp-for="ContentCreate.Url" type="text" id="txtUrl" hidden="hidden" />
<div class="form-group row">
    <label for="nameInput" class="col-sm-2 col-form-label text-right">Name</label>
    <div class="col-sm-6">
        <input id="nameInput" class="form-control-black" asp-for="ContentCreate.Name">
    </div>
</div>
<div class="form-group row">
    <label for="descriptionInput" class="col-sm-2 col-form-label text-right">Description</label>
    <div class="col-sm-6">
        <input id="descriptionInput" class="form-control-black" asp-for="ContentCreate.Description">
    </div>
</div>

@await Html.PartialAsync("_SettingsPartial")

<input id="videoId" asp-for="ContentCreate.Id" hidden="hidden" />
<input asp-for="ContentCreate.DirectoryId" hidden="hidden">
<input asp-for="ContentCreate.Order" hidden="hidden">
<input id="contentSeekTo" type="number" name="ContentCreate.SeekTo" value="@(Model.ContentCreate.SeekTo)" hidden="hidden" />

<br />
<br />
<div id="NewNoteLocation" level=1>
    @foreach (var note in Model.ContentCreate.Notes.Where(x => x.InPageParentId == null).OrderBy(x => x.InPageId))
    {
        @await Html.PartialAsync("_NoteCreatePartial", new VideoCreatePartial { Note = note, Notes = Model.ContentCreate.Notes });
    }
</div>
<br />
<button id="test" type="button" class="btn btn-primary">Test</button>
@await Html.PartialAsync("_BottomControllPartial")

<button class="btn btn-success" id="submitBtn" type="button">Save Content</button>
<a class="btn btn-danger float-right" id="go-back-to-dir" asp-area="" asp-controller="Directory" asp-action="IndexReact" asp-route-id="@(Model.ContentCreate.DirectoryId)">Don't Save</a>
<br />
@*</form>*@

@section Scripts
    {

    <script type="text/javascript" src="~/js/AutoReize/jquery.autoresize.js"></script>

    <script type="text/javascript" src="~/js/Video/extractVideoToken.js"></script>
    @if (Model.Mode == "edit")
    {
        <script type="text/javascript" src="~/js/Video/editVideoSetUp.js"></script>
    }
    else
    {
        <script type="text/javascript" src="~/js/Video/createVideoSetUp.js"></script>
    }
    <script type="text/javascript" src="~/js/Video/VideoResize.js"></script>
    <script type="text/javascript" src="~/js/Video/notesCreate.js"></script>
    <script type="text/javascript">
        let settings = {};
        settings.PauseVideoOnBottomNewNote = @(Model.Settings.VNPauseVideoOnBottomNewNote.ToString().ToLower());
        settings.PauseVideoOnSubNoteTop = @(Model.Settings.VNPauseVideoOnSubNoteTop.ToString().ToLower());
        settings.PauseVideoOnSubNoteRegular = @(Model.Settings.VNPauseVideoOnSubNoteRegular.ToString().ToLower());
        settings.PauseVideoOnTimeStampBottom = @(Model.Settings.VNPauseVideoOnTimeStampBottom.ToString().ToLower());
        settings.PauseVideoOnTimeStampTop = @(Model.Settings.VNPauseVideoOnTimeStampTop.ToString().ToLower());
        settings.PauseVideoOnTopicBottom = @(Model.Settings.VNPauseVideoOnTopicBottom.ToString().ToLower());
        settings.PauseVideoOnTopicTop = @(Model.Settings.VNPauseVideoOnTopicTop.ToString().ToLower());
        settings.PauseVideoOnTopNewNote = @(Model.Settings.VNPauseVideoOnTopNewNote.ToString().ToLower());
        /*all*/settings.GoDownOnNewNoteTop = @(Model.Settings.VNGoDownOnNewNoteTop.ToString().ToLower());
        /*all*/settings.GoDownOnSubNoteAll = @(Model.Settings.VNGoDownOnSubNoteAll.ToString().ToLower());
        /*all*/settings.GoDownOnNewTimeStampTop = @(Model.Settings.VNGoDownOnNewTimeStampTop.ToString().ToLower());
        /*all*/settings.GoDownOnNewTopicTop = @(Model.Settings.VNGoDownOnNewTopicTop.ToString().ToLower());
        settings.AutoSaveProgress = @(Model.Settings.VNAutoSaveProgress.ToString().ToLower());
        $(document).ready(function () {
            let enumerators = JSON.parse('@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(
            Enum.GetValues(typeof(Formatting)), new Newtonsoft.Json.Converters.StringEnumConverter()))');
            let nextId = @Model.ContentCreate.Notes.Count;

            @* this writes into the html all the information for the note and the
            and its parent, then the js reads it so it knows what needs cascade deleting
            when a parent note is deleted *@
            let notes = [];
            @{
                var notesSharp = Model.ContentCreate.Notes.OrderBy(x => x.InPageId).ToList();
                for (var i = 0; i < notesSharp.Count; i++)
                {
                    var note = notesSharp[i];
                    @:notes[@(i)] = @(note.Deleted == true ? -1 : note.InPageParentId == null? -1 : note.InPageParentId);
                }
            }
            notesFunction(enumerators, nextId, notes, settings);
        });
    </script>
    <script type="text/javascript" src="~/js/Video/videoSave.js"></script>
    <script>
        $(document).ready(function () {
            $('textarea').autoResize({
                'minRows': 2,
                'maxRows' : 10
            });
        });
    </script>
}

