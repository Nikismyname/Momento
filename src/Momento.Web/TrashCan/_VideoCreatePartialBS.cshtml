@*@using System.Linq;
@model ContentCreatePartial

@{
    var id = Model.Note.InPageId;
    var lvl = Model.Note.Level;
    var pid = Model.Note.InPageParentId;
    var delStat = Model.Note.Deleted.ToString().ToLower();

    var options = (Formatting[])Enum.GetValues(typeof(Formatting));
}

@if (Model.Note.Deleted == true)
{
    <input id="deleted@(id)" type="text" name="ContentCreate.Notes[@(id)].Deleted" value="@(delStat)" hidden="hidden" />
    <input type="number" name="ContentCreate.Notes[@(id)].InPageId" value="@(id)" hidden="hidden" />
}
else
{
    <div class="row">
        <div class="offset-@(lvl-1) col-9">
            <textarea class="form form-control-black" id="textarea@(id)" rows="2" name="ContentCreate.Notes[@(id)].Content">@(Model.Note.Content)</textarea>
        </div>
    </div>
    <div class="row">
        <div class="offset-@(lvl-1) col-2">
            @if (Model.Note.Level < 4)
            {
                <button id="subNoteButton@(id)" type="button" class="subNoteButton btn btn-secondary btn-block" level="@(lvl)" parentId="@(id)">Sub-note</button>
            }
        </div>
        <div class="col-5">
            <select class="form-control-black" id="select@(id)" name="ContentCreate.Notes[@(id)].Formatting" selected>
                @for (int i = 0; i < options.Length; i++)
                {
                    var displayName = options[i].ToString().Replace('_', ' ');
                    if (i == (int)Model.Note.Formatting)
                    {
                        <option selected="selected" value="@(i)">@(displayName)</option>
                    }
                    else
                    {
                        <option value="@(i)">@(displayName)</option>
                    }
                }
            </select>
        </div>
        <div class="col-2">
            <button id="delButton@(id)" class="delButton btn btn-warning btn-block" noteId="@(id)" type="button">Delete</button>
        </div>
    </div>

    <input type="number" name="ContentCreate.Notes[@(id)].Level" value="@(lvl)" hidden="hidden" />
    <input id="deleted@(id)" type="text" name="ContentCreate.Notes[@(id)].Deleted" value="@(delStat)" hidden="hidden" />
    <input type="number" name="ContentCreate.Notes[@(id)].SeekTo" value="@(Model.Note.SeekTo)" hidden="hidden" />
    <input type="number" name="ContentCreate.Notes[@(id)].InPageId" value="@(id)" hidden="hidden" />
    <input type="number" name="ContentCreate.Notes[@(id)].InPageParentId" value="@(pid)" hidden="hidden" />
    <input type="number" name="ContentCreate.Notes[@(id)].Type" value="@((int)Model.Note.Type)" hidden="hidden" />
}

<div class="note-offset" id="div@(id)">
    @{
        var children = Model.Notes.Where(x => x.InPageParentId == Model.Note.InPageId).ToArray();
        if (children.Length > 0)
        {
            foreach (var child in children)
            {
                @await Html.PartialAsync("_VideoCreatePartialBS", new ContentCreatePartial { Note = child, Notes = Model.Notes });
            }
        }
    }
</div>*@


